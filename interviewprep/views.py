from django.shortcuts import render, redirect
from .models import InterviewPrep
from jobs.models import Job
from candidates.models import Candidate
from core.views import read_pdf_text, normalize_pdf_text
import markdown
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required

def clean_markdown(text):
    return text.replace("```markdown", "").replace("```", "").strip()

def prepare_interview(request):
    if request.method == "POST":
        job_id = request.POST.get("job_id")
        candidate_id = request.POST.get("candidate_id")
        free_text = request.POST.get("prompt")
        job_file = request.FILES.get("job_file")

        job = Job.objects.filter(id=job_id).first() if job_id else None
        candidate = Candidate.objects.filter(id=candidate_id).first() if candidate_id else None

        # Kombinera jobbk√§llor
        job_text_parts = []

        if free_text:
            job_text_parts.append(f"Fritext fr√•n anv√§ndaren:\n{free_text.strip()}")

        if job and job.description:
            job_text_parts.append(f"Jobbeskrivning fr√•n databasen:\n{job.description.strip()}")

        if job_file:
            pdf_text = read_pdf_text(job_file)
            cleaned_text = normalize_pdf_text(pdf_text)
            job_text_parts.append(f"Text extraherad fr√•n PDF:\n{cleaned_text}")

        job_description = "\n\n".join(job_text_parts).strip()

        print("üìÑ Kombinerad jobbeskrivning som skickas till OpenAI:\n", job_description)

        questions, notes = generate_interview_questions(job_description, candidate)

        InterviewPrep.objects.create(
            job=job,
            candidate=candidate,
            generated_questions=questions,
            ai_notes=notes
        )

        return render(request, 'interviewprep/result.html', {
            'result': markdown.markdown(clean_markdown(questions)),
            'candidate': candidate,
            'candidate_summary': markdown.markdown(clean_markdown(notes)),
            'job': job,
        })

    return render(request, 'interviewprep/form.html', {
        'jobs': Job.objects.all(),
        'candidates': Candidate.objects.all()
    })

from openai import OpenAI
client = OpenAI()

def generate_interview_questions(job_text, candidate=None):
    if candidate:
        candidate_info = f"""
        Kandidatens namn: {candidate.first_name} {candidate.last_name}

        Kandidatens CV:
        \"\"\"{candidate.cv_text}\"\"\"
        """
    else:
        candidate_info = ""

    prompt = f"""
    Du √§r en erfaren HR-specialist. H√§r √§r information om ett jobb:

    \"\"\"{job_text}\"\"\" 

    Och h√§r √§r information om en kandidat:

    {candidate_info}

    Din uppgift √§r att skapa material inf√∂r en kompetensbaserad intervju.

    G√∂r f√∂ljande:

    1. Skapa 10 kompetensbaserade intervjufr√•gor som √§r relevanta f√∂r jobbet.
    2. Formatera varje fr√•ga som en rubrik med `### Fr√•ga 1`, `### Fr√•ga 2`, etc.
    3. Under varje rubrik:
    - Skriv sj√§lva fr√•gan i **fetstil**
    - L√§gg en tom rad efter fr√•gan
    - Skriv sedan en punktlista d√§r varje punkt b√∂rjar med `- Lyssna efter:` f√∂ljt av vad intervjuaren b√∂r uppm√§rksamma
    - Avsluta med ett separat stycke som b√∂rjar med `üü¢ Ett starkt svar inneh√•ller:` och `üî¥ Ett svagare svar √§r:`

    Exempel:

    ### Fr√•ga 1  
    **Beskriv en situation d√§r du...**

    - Lyssna efter: detta  
    - Lyssna efter: det h√§r ocks√•

    üü¢ Ett starkt svar inneh√•ller...  
    üî¥ Ett svagare svar √§r...

    4. Efter alla fr√•gor, skriv en sammanfattning under rubriken `### T√§nk p√• detta`. Om kandidaten har ett namn, anv√§nd namnet. Skriv sammanfattningen baserat p√• kandidatens CV och jobbet, t ex om det finns
    vissa delar av CVt som beh√∂ver beskrivas n√§rmare eller om det finns n√•got i CVt som √§r extra bra f√∂r jobbet eller liknande. G√∂r s√• sammanfattningen k√§nns unik f√∂r just denna kandidat och detta jobb.

    Svara p√• **svenska** och anv√§nd **korrekt Markdown-format**.
    """

    # üëá DEBUG: visa vad som skickas in
    print("üß† PROMPT TILL OPENAI:\n", prompt)

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "Du √§r en erfaren HR-specialist."},
            {"role": "user", "content": prompt}
        ]
    )
    full_text = response.choices[0].message.content.strip()

    # üëá DEBUG: visa vad som kommer tillbaka
    print("‚úÖ SVAR FR√ÖN OPENAI:\n", full_text)

    if "### T√§nk p√• detta" in full_text:
        questions_part, tips_part = full_text.split("### T√§nk p√• detta", 1)
        questions = questions_part.strip()
        notes = tips_part.strip()
    else:
        questions = full_text
        notes = ""

    return questions, notes